package ua.petros.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import ua.petros.model.*;
import ua.petros.service.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

/**
 * A Spring controller that allows the users to download a PDF document
 * generated by the Apache POI library.
 * 
 * @author www.codejava.net
 * 
 */
@Controller
public class PDFFileDownloadController {

	@Autowired
	private ProjectService projectService;

	@Autowired
	private UserService userService;

	@Autowired
	private BeneficiaryService beneficiaryService;

	/**
	 * Handle request to download PDF document
	 */

	@RequestMapping(value = "/reports/projects/pdf", method = RequestMethod.GET)
	public ModelAndView downloadPDFProjects(
			@ModelAttribute("projectId") String projectId,
			@ModelAttribute("isAllProjects") String isAllProjects,
			@ModelAttribute("isWholePeriod") String isWholePeriod,
			@ModelAttribute("fromDate") String fromDate,
			@ModelAttribute("toDate") String toDate,
			@ModelAttribute("fieldContactId") String fieldContactId,
			@ModelAttribute("isAllFieldContacts") String isAllFieldContacts,
			@ModelAttribute("beneficiaryId") String beneficiaryId,
			@ModelAttribute("isAllBeneficiaries") String isAllBeneficiaries,
			@ModelAttribute("projectStatus") String projectStatus
	) {

		List<Project> listProjects = new ArrayList<>();
		if ("true".equals(isAllProjects)){
			listProjects = projectService.getAll();
		} else {
			Project project = projectService.getById(UUID.fromString(projectId));
			listProjects.clear();
			listProjects.add(project);
		}

		List<Project> sortedListProjects;

		if ("true".equals(isAllFieldContacts)) {
			sortedListProjects = listProjects.stream().sorted().collect(Collectors.toList());
		} else {
			sortedListProjects = listProjects.stream().sorted()
					.filter(project -> Objects.nonNull(project.getFieldContactUser()))
					.filter(project -> UUID.fromString(fieldContactId).equals(project.getFieldContactUser().getId()))
					.collect(Collectors.toList());
		}

		List<Project> projects;
		if ("true".equals(isAllBeneficiaries)) {
			projects = sortedListProjects;
		} else {
			projects = sortedListProjects.stream()
					.filter(project -> Objects.nonNull(project.getBeneficiary()))
					.filter(project -> UUID.fromString(beneficiaryId).equals(project.getBeneficiary().getId()))
					.collect(Collectors.toList());
		}

		List<Project> projectResultList;
		switch(projectStatus) {
			case "all":
				projectResultList = projects;
				break;
			case "closed":
				projectResultList = projects.stream()
						.filter(project -> "closed".equals(project.getStatus().getName()))
						.collect(Collectors.toList());
				break;
			case "exceptClosed":
				projectResultList = projects.stream()
						.filter(project -> !"closed".equals(project.getStatus().getName()))
						.collect(Collectors.toList());
				break;
			default:
				projectResultList = projects;
		}

		Date startDate= null;
		if (fromDate != null && !fromDate.trim().isEmpty()) {
			try {
				startDate = new SimpleDateFormat("yyyy-MM-dd").parse(fromDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			try {
				startDate = new SimpleDateFormat("yyyy-MM-dd").parse("1900-01-01");
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}

		Date endDate= null;
		if (toDate != null && !toDate.trim().isEmpty()) {
			try {
				endDate = new SimpleDateFormat("yyyy-MM-dd").parse(toDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} else {
			try {
				endDate = new SimpleDateFormat("yyyy-MM-dd").parse("5900-01-01");
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}

		User fieldContact = userService.getById(UUID.fromString(fieldContactId));
		Beneficiary beneficiary = beneficiaryService.getById(UUID.fromString(beneficiaryId));

		Map<String, Object> modelMap = new HashMap<String, Object>();
		modelMap.put("listProjects",projectResultList);
		modelMap.put("startDate",startDate);
		modelMap.put("endDate",endDate);
		modelMap.put("isWholePeriod",isWholePeriod);
		modelMap.put("fieldContact",fieldContact);
		modelMap.put("isAllFieldContacts",isAllFieldContacts);
		modelMap.put("beneficiary", beneficiary);
		modelMap.put("isAllBeneficiaries",isAllBeneficiaries);

		// return a view which will be resolved by a pdf view resolver
		//return new ModelAndView("pdfProjectsView", "listProjects", sortedListProjects);
		return new ModelAndView("pdfProjectsView", modelMap);
	}
}